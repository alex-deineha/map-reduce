{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>EVENT NUMBER</th>\n",
       "      <th>DATE/TIME</th>\n",
       "      <th>ADDRESS ROUNDED TO BLOCK NUMBER OR INTERSECTION</th>\n",
       "      <th>PATROL BEAT</th>\n",
       "      <th>INCIDENT TYPE</th>\n",
       "      <th>INCIDENT TYPE DESCRIPTION</th>\n",
       "      <th>PRIORITY</th>\n",
       "      <th>TIME</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>LOP130101000001</td>\n",
       "      <td>2013-01-01T00:00:00.000</td>\n",
       "      <td>2700 78TH AV</td>\n",
       "      <td>30Y</td>\n",
       "      <td>415SS</td>\n",
       "      <td>415 SHOT SPOTTER GUN</td>\n",
       "      <td>2</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>LOP130101000002</td>\n",
       "      <td>2013-01-01T00:00:00.000</td>\n",
       "      <td>8700 D ST</td>\n",
       "      <td>33X</td>\n",
       "      <td>415GS</td>\n",
       "      <td>415 GUNSHOTS</td>\n",
       "      <td>1</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>LOP130101000003</td>\n",
       "      <td>2013-01-01T00:00:00.000</td>\n",
       "      <td>1800 BRIDGE AV</td>\n",
       "      <td>23X</td>\n",
       "      <td>243E</td>\n",
       "      <td>BATTERY ON CO-HABITA</td>\n",
       "      <td>1</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>LOP130101000004</td>\n",
       "      <td>2013-01-01T00:00:00.000</td>\n",
       "      <td>7600 ARTHUR ST</td>\n",
       "      <td>30X</td>\n",
       "      <td>415GS</td>\n",
       "      <td>415 GUNSHOTS</td>\n",
       "      <td>2</td>\n",
       "      <td>00:00:00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>LOP130101000005</td>\n",
       "      <td>2013-01-01T00:02:00.000</td>\n",
       "      <td>55TH AV &amp; BROOKDALE AV</td>\n",
       "      <td>29X</td>\n",
       "      <td>415GS</td>\n",
       "      <td>415 GUNSHOTS</td>\n",
       "      <td>2</td>\n",
       "      <td>00:02:00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      EVENT NUMBER                DATE/TIME  \\\n",
       "0  LOP130101000001  2013-01-01T00:00:00.000   \n",
       "1  LOP130101000002  2013-01-01T00:00:00.000   \n",
       "2  LOP130101000003  2013-01-01T00:00:00.000   \n",
       "3  LOP130101000004  2013-01-01T00:00:00.000   \n",
       "4  LOP130101000005  2013-01-01T00:02:00.000   \n",
       "\n",
       "  ADDRESS ROUNDED TO BLOCK NUMBER OR INTERSECTION PATROL BEAT INCIDENT TYPE  \\\n",
       "0                                    2700 78TH AV         30Y         415SS   \n",
       "1                                       8700 D ST         33X         415GS   \n",
       "2                                  1800 BRIDGE AV         23X          243E   \n",
       "3                                  7600 ARTHUR ST         30X         415GS   \n",
       "4                          55TH AV & BROOKDALE AV         29X         415GS   \n",
       "\n",
       "  INCIDENT TYPE DESCRIPTION  PRIORITY      TIME  \n",
       "0      415 SHOT SPOTTER GUN         2  00:00:00  \n",
       "1              415 GUNSHOTS         1  00:00:00  \n",
       "2      BATTERY ON CO-HABITA         1  00:00:00  \n",
       "3              415 GUNSHOTS         2  00:00:00  \n",
       "4              415 GUNSHOTS         2  00:02:00  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data = pd.read_csv('oakland-crime.csv')\n",
    "data['TIME'] = pd.to_datetime(data['DATE/TIME']).dt.time\n",
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(759147, 8)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Map Reduce class"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "class MapReduce:\n",
    "    def __init__(self):\n",
    "        self.queue = []\n",
    "\n",
    "    def add_element(self, map_element, reduce_element=1):\n",
    "        self.queue.append((map_element, reduce_element))\n",
    "    \n",
    "    def clear(self):\n",
    "        self.queue = []\n",
    "    \n",
    "    def score(self):\n",
    "        result = {}\n",
    "        buf_score = 0\n",
    "        self.queue.sort()\n",
    "        prev_map = None\n",
    "        \n",
    "        for element in self.queue:\n",
    "            current_map, current_reduce = element          \n",
    "            if current_map == prev_map or prev_map is None:\n",
    "                if np.isnan(current_reduce): \n",
    "                    current_reduce = 0\n",
    "                buf_score += current_reduce\n",
    "            else:\n",
    "                result[prev_map] = buf_score\n",
    "                buf_score = 0\n",
    "                buf_score += current_reduce\n",
    "            prev_map = current_map\n",
    "        \n",
    "        result[current_map] = buf_score\n",
    "            \n",
    "        return result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "def perfom_map_reduce(series):\n",
    "    mapper = MapReduce()\n",
    "    series.apply(mapper.add_element)\n",
    "    return pd.Series(mapper.score())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Crimes amount by priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "# %%time\n",
    "reduced_data = perfom_map_reduce(data['PRIORITY'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "        <script type=\"text/javascript\">\n",
       "        window.PlotlyConfig = {MathJaxConfig: 'local'};\n",
       "        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n",
       "        if (typeof require !== 'undefined') {\n",
       "        require.undef(\"plotly\");\n",
       "        requirejs.config({\n",
       "            paths: {\n",
       "                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n",
       "            }\n",
       "        });\n",
       "        require(['plotly'], function(Plotly) {\n",
       "            window._Plotly = Plotly;\n",
       "        });\n",
       "        }\n",
       "        </script>\n",
       "        "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "type": "bar",
         "uid": "f0add0ca-007f-4067-b6ed-8a122f9ce04a",
         "x": [
          0,
          1,
          2,
          3,
          4,
          5,
          6,
          7,
          8,
          9
         ],
         "y": [
          46,
          90829,
          390280,
          223992,
          31682,
          21586,
          388,
          5,
          6,
          333
         ]
        }
       ],
       "layout": {
        "title": {
         "text": "Crimes amount by priority"
        },
        "xaxis": {
         "title": {
          "text": "Priority"
         }
        }
       }
      },
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"697a2cb1-9f58-446a-a276-bfc0f3f9da3a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    window.PLOTLYENV.BASE_URL='https://plot.ly';\n",
       "                    \n",
       "                if (document.getElementById(\"697a2cb1-9f58-446a-a276-bfc0f3f9da3a\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        '697a2cb1-9f58-446a-a276-bfc0f3f9da3a',\n",
       "                        [{\"type\": \"bar\", \"uid\": \"f0add0ca-007f-4067-b6ed-8a122f9ce04a\", \"x\": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9], \"y\": [46, 90829, 390280, 223992, 31682, 21586, 388, 5, 6, 333]}],\n",
       "                        {\"title\": {\"text\": \"Crimes amount by priority\"}, \"xaxis\": {\"title\": {\"text\": \"Priority\"}}},\n",
       "                        {\"showLink\": false, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('697a2cb1-9f58-446a-a276-bfc0f3f9da3a');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import plotly.graph_objs as go\n",
    "from plotly.offline import init_notebook_mode, iplot\n",
    "init_notebook_mode(connected=True)\n",
    "\n",
    "trace = go.Bar(x=reduced_data.index,\n",
    "               y=reduced_data)\n",
    "layout = go.Layout(title='Crimes amount by priority',\n",
    "                  xaxis=dict(title='Priority'),)\n",
    "fig = go.Figure(data=[trace], layout=layout)\n",
    "\n",
    "iplot(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Crimes by time and priority"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['HOUR'] = pd.to_datetime(data['DATE/TIME']).dt.strftime('%H:00')\n",
    "data['PRIORITY/HOUR'] = data[['PRIORITY', 'HOUR']].apply(tuple, axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "reduced_data = perfom_map_reduce(data['PRIORITY/HOUR'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "name": "Priority: 1",
         "type": "bar",
         "uid": "4ceee8b3-2caf-484d-935d-9f5e1c3f712a",
         "x": [
          "00:00",
          "01:00",
          "02:00",
          "03:00",
          "04:00",
          "05:00",
          "06:00",
          "07:00",
          "08:00",
          "09:00",
          "10:00",
          "11:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "18:00",
          "19:00",
          "20:00",
          "21:00",
          "22:00",
          "23:00"
         ],
         "y": [
          4196,
          3328,
          2674,
          1985,
          1520,
          1270,
          1284,
          1714,
          2500,
          3015,
          3516,
          3992,
          4222,
          4456,
          4315,
          4730,
          4892,
          5095,
          5337,
          5421,
          5660,
          5664,
          5431,
          4612
         ]
        },
        {
         "name": "Priority: 2",
         "type": "bar",
         "uid": "9f18146b-1495-41d2-8394-6e0bd9cb40c3",
         "x": [
          "00:00",
          "01:00",
          "02:00",
          "03:00",
          "04:00",
          "05:00",
          "06:00",
          "07:00",
          "08:00",
          "09:00",
          "10:00",
          "11:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "18:00",
          "19:00",
          "20:00",
          "21:00",
          "22:00",
          "23:00"
         ],
         "y": [
          15486,
          12139,
          9867,
          7607,
          6575,
          5780,
          6027,
          9661,
          15938,
          18830,
          19445,
          20571,
          20219,
          20356,
          19959,
          20378,
          21286,
          21315,
          20935,
          20428,
          19584,
          19670,
          19659,
          18565
         ]
        },
        {
         "name": "Priority: 3",
         "type": "bar",
         "uid": "def2e068-a25e-47c1-9ca7-108b59ed22b0",
         "x": [
          "00:00",
          "01:00",
          "02:00",
          "03:00",
          "04:00",
          "05:00",
          "06:00",
          "07:00",
          "08:00",
          "09:00",
          "10:00",
          "11:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "18:00",
          "19:00",
          "20:00",
          "21:00",
          "22:00",
          "23:00"
         ],
         "y": [
          7513,
          5293,
          3489,
          3040,
          3003,
          4399,
          6379,
          10518,
          12374,
          13244,
          13129,
          13369,
          12679,
          12814,
          14470,
          14955,
          11494,
          9903,
          9439,
          8511,
          7912,
          8459,
          9024,
          8582
         ]
        },
        {
         "name": "Priority: 4",
         "type": "bar",
         "uid": "75c91a3e-88bf-445a-baa8-b072af57fefe",
         "x": [
          "00:00",
          "01:00",
          "02:00",
          "03:00",
          "04:00",
          "05:00",
          "06:00",
          "07:00",
          "08:00",
          "09:00",
          "10:00",
          "11:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "18:00",
          "19:00",
          "20:00",
          "21:00",
          "22:00",
          "23:00"
         ],
         "y": [
          1189,
          1268,
          135,
          99,
          82,
          529,
          1319,
          1168,
          941,
          1755,
          3016,
          3106,
          2764,
          2867,
          3236,
          2453,
          1587,
          809,
          816,
          728,
          575,
          485,
          343,
          412
         ]
        },
        {
         "name": "Priority: 5",
         "type": "bar",
         "uid": "f47166e1-20be-4e40-b278-d3bc53c81f16",
         "x": [
          "00:00",
          "01:00",
          "02:00",
          "03:00",
          "04:00",
          "05:00",
          "06:00",
          "07:00",
          "08:00",
          "09:00",
          "10:00",
          "11:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "18:00",
          "19:00",
          "20:00",
          "21:00",
          "22:00",
          "23:00"
         ],
         "y": [
          1635,
          816,
          685,
          782,
          1515,
          1769,
          325,
          87,
          254,
          474,
          600,
          936,
          1158,
          1162,
          915,
          616,
          686,
          897,
          943,
          993,
          769,
          757,
          1008,
          1804
         ]
        },
        {
         "name": "Priority: 6",
         "type": "bar",
         "uid": "c1df007d-6ee4-4bce-b20c-485e01994a4b",
         "x": [
          "00:00",
          "01:00",
          "02:00",
          "03:00",
          "04:00",
          "05:00",
          "06:00",
          "07:00",
          "08:00",
          "09:00",
          "10:00",
          "11:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "18:00",
          "19:00",
          "20:00",
          "21:00",
          "22:00",
          "23:00"
         ],
         "y": [
          41,
          30,
          30,
          18,
          5,
          5,
          5,
          2,
          11,
          6,
          7,
          4,
          2,
          3,
          2,
          7,
          12,
          10,
          19,
          12,
          32,
          24,
          38,
          63
         ]
        },
        {
         "name": "Priority: 7",
         "type": "bar",
         "uid": "b0104dd4-32f0-4caa-8439-19797443139b",
         "x": [
          "00:00",
          "04:00",
          "10:00"
         ],
         "y": [
          3,
          1,
          1
         ]
        },
        {
         "name": "Priority: 8",
         "type": "bar",
         "uid": "05f6f5f0-d90e-4468-b8b9-57ee5335aa7c",
         "x": [
          "00:00",
          "20:00"
         ],
         "y": [
          5,
          1
         ]
        },
        {
         "name": "Priority: 9",
         "type": "bar",
         "uid": "2d3488fa-8d26-428e-8880-09e637a669b9",
         "x": [
          "00:00",
          "01:00",
          "12:00",
          "13:00",
          "14:00",
          "15:00",
          "16:00",
          "17:00",
          "23:00"
         ],
         "y": [
          314,
          8,
          2,
          1,
          1,
          1,
          1,
          2,
          3
         ]
        }
       ],
       "layout": {
        "barmode": "stack",
        "title": {
         "text": "Crimes amount by time and priority"
        },
        "xaxis": {
         "title": {
          "text": "Time"
         }
        }
       }
      },
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"7fd565ac-3376-4704-a8b0-711c84376a0e\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    window.PLOTLYENV.BASE_URL='https://plot.ly';\n",
       "                    \n",
       "                if (document.getElementById(\"7fd565ac-3376-4704-a8b0-711c84376a0e\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        '7fd565ac-3376-4704-a8b0-711c84376a0e',\n",
       "                        [{\"name\": \"Priority: 1\", \"type\": \"bar\", \"uid\": \"4ceee8b3-2caf-484d-935d-9f5e1c3f712a\", \"x\": [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"], \"y\": [4196, 3328, 2674, 1985, 1520, 1270, 1284, 1714, 2500, 3015, 3516, 3992, 4222, 4456, 4315, 4730, 4892, 5095, 5337, 5421, 5660, 5664, 5431, 4612]}, {\"name\": \"Priority: 2\", \"type\": \"bar\", \"uid\": \"9f18146b-1495-41d2-8394-6e0bd9cb40c3\", \"x\": [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"], \"y\": [15486, 12139, 9867, 7607, 6575, 5780, 6027, 9661, 15938, 18830, 19445, 20571, 20219, 20356, 19959, 20378, 21286, 21315, 20935, 20428, 19584, 19670, 19659, 18565]}, {\"name\": \"Priority: 3\", \"type\": \"bar\", \"uid\": \"def2e068-a25e-47c1-9ca7-108b59ed22b0\", \"x\": [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"], \"y\": [7513, 5293, 3489, 3040, 3003, 4399, 6379, 10518, 12374, 13244, 13129, 13369, 12679, 12814, 14470, 14955, 11494, 9903, 9439, 8511, 7912, 8459, 9024, 8582]}, {\"name\": \"Priority: 4\", \"type\": \"bar\", \"uid\": \"75c91a3e-88bf-445a-baa8-b072af57fefe\", \"x\": [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"], \"y\": [1189, 1268, 135, 99, 82, 529, 1319, 1168, 941, 1755, 3016, 3106, 2764, 2867, 3236, 2453, 1587, 809, 816, 728, 575, 485, 343, 412]}, {\"name\": \"Priority: 5\", \"type\": \"bar\", \"uid\": \"f47166e1-20be-4e40-b278-d3bc53c81f16\", \"x\": [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"], \"y\": [1635, 816, 685, 782, 1515, 1769, 325, 87, 254, 474, 600, 936, 1158, 1162, 915, 616, 686, 897, 943, 993, 769, 757, 1008, 1804]}, {\"name\": \"Priority: 6\", \"type\": \"bar\", \"uid\": \"c1df007d-6ee4-4bce-b20c-485e01994a4b\", \"x\": [\"00:00\", \"01:00\", \"02:00\", \"03:00\", \"04:00\", \"05:00\", \"06:00\", \"07:00\", \"08:00\", \"09:00\", \"10:00\", \"11:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"18:00\", \"19:00\", \"20:00\", \"21:00\", \"22:00\", \"23:00\"], \"y\": [41, 30, 30, 18, 5, 5, 5, 2, 11, 6, 7, 4, 2, 3, 2, 7, 12, 10, 19, 12, 32, 24, 38, 63]}, {\"name\": \"Priority: 7\", \"type\": \"bar\", \"uid\": \"b0104dd4-32f0-4caa-8439-19797443139b\", \"x\": [\"00:00\", \"04:00\", \"10:00\"], \"y\": [3, 1, 1]}, {\"name\": \"Priority: 8\", \"type\": \"bar\", \"uid\": \"05f6f5f0-d90e-4468-b8b9-57ee5335aa7c\", \"x\": [\"00:00\", \"20:00\"], \"y\": [5, 1]}, {\"name\": \"Priority: 9\", \"type\": \"bar\", \"uid\": \"2d3488fa-8d26-428e-8880-09e637a669b9\", \"x\": [\"00:00\", \"01:00\", \"12:00\", \"13:00\", \"14:00\", \"15:00\", \"16:00\", \"17:00\", \"23:00\"], \"y\": [314, 8, 2, 1, 1, 1, 1, 2, 3]}],\n",
       "                        {\"barmode\": \"stack\", \"title\": {\"text\": \"Crimes amount by time and priority\"}, \"xaxis\": {\"title\": {\"text\": \"Time\"}}},\n",
       "                        {\"showLink\": false, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('7fd565ac-3376-4704-a8b0-711c84376a0e');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "traces = [go.Bar(\n",
    "        x=reduced_data[i].index,\n",
    "        y=reduced_data[i],\n",
    "        name='Priority: '+str(i)) for i in range(1,10)]\n",
    "\n",
    "layout = go.Layout(barmode='stack', \n",
    "                   xaxis=dict(title='Time'),\n",
    "                   title='Crimes amount by time and priority')\n",
    "\n",
    "fig = go.Figure(data=traces, layout=layout)\n",
    "iplot(fig)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Crimes by incident type"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "reduced_data = perfom_map_reduce(data['INCIDENT TYPE'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "linkText": "Export to plot.ly",
        "plotlyServerURL": "https://plot.ly",
        "showLink": false
       },
       "data": [
        {
         "type": "bar",
         "uid": "0abecde6-dd56-448c-8160-9867d4f45c06",
         "x": [
          "107",
          "10751",
          "10801",
          "10851",
          "10852",
          "10855",
          "11350",
          "11351",
          "11357",
          "11368",
          "11500",
          "11550",
          "136_1",
          "140",
          "148",
          "148_5A",
          "160B",
          "162",
          "166",
          "166_4",
          "182",
          "187",
          "20001",
          "20002",
          "203",
          "207",
          "209",
          "211",
          "211S",
          "21235V",
          "212_5",
          "215",
          "220",
          "23103",
          "23109",
          "23110",
          "23110A",
          "23110B",
          "23152",
          "236",
          "240",
          "242",
          "243A",
          "243B",
          "243D",
          "243E",
          "243_4",
          "244",
          "245",
          "246",
          "247",
          "261",
          "261KIT",
          "261VIC",
          "261_5",
          "262",
          "270",
          "270C",
          "271",
          "272",
          "273A",
          "273D",
          "273_5",
          "273_6",
          "277",
          "278",
          "278_5",
          "285",
          "286",
          "288",
          "290",
          "300A",
          "300B",
          "300WI",
          "3056",
          "311",
          "314",
          "31VC",
          "3211H",
          "330",
          "368",
          "370",
          "372",
          "374",
          "402B",
          "415",
          "415A",
          "415BF",
          "415C",
          "415CU",
          "415D",
          "415E",
          "415F",
          "415FC",
          "415G",
          "415GF",
          "415GS",
          "415J",
          "415LT",
          "415N",
          "415P",
          "415RM",
          "415SS",
          "415TH",
          "415UG",
          "417",
          "418",
          "422",
          "422.6",
          "4390",
          "451",
          "4532",
          "459",
          "459AU",
          "470",
          "472",
          "475",
          "476",
          "484",
          "484COD",
          "484E",
          "484G",
          "484LP",
          "484TT",
          "487",
          "487E",
          "496",
          "498",
          "503",
          "508",
          "5150",
          "5150B",
          "518",
          "524",
          "529",
          "530",
          "537",
          "593",
          "594",
          "597",
          "601I",
          "601PU",
          "601R",
          "602L",
          "626_1",
          "626_6",
          "626_9",
          "646_9",
          "647",
          "647B",
          "647C",
          "647F",
          "647_6",
          "653G",
          "653M",
          "653Y",
          "900",
          "901",
          "901A",
          "901B",
          "901CP",
          "901D",
          "901H",
          "905",
          "906",
          "907",
          "908A",
          "908B",
          "908C",
          "908D",
          "909D",
          "910",
          "911H",
          "911N",
          "912",
          "913",
          "913A",
          "913TH",
          "914",
          "915",
          "918",
          "921",
          "922",
          "922A",
          "922B",
          "924",
          "925",
          "928",
          "928C",
          "928P",
          "929",
          "929AU",
          "933AU",
          "933MA",
          "933MED",
          "933R",
          "933S",
          "933SA",
          "933T",
          "940",
          "940A",
          "940B",
          "941",
          "943",
          "945",
          "945A",
          "945B",
          "946",
          "947",
          "947J",
          "949",
          "950",
          "953",
          "955",
          "955A",
          "955B",
          "955E",
          "955F",
          "962",
          "963",
          "968",
          "968A",
          "970",
          "970A",
          "970B",
          "970C",
          "973",
          "975",
          "976",
          "976A",
          "976B",
          "977",
          "977A",
          "A'S",
          "A10851",
          "A211",
          "A261",
          "A459",
          "A487",
          "ABC",
          "ACU",
          "AOA",
          "ASSIST",
          "AWOL",
          "BBALL",
          "BCAST",
          "BLALRT",
          "BOARD",
          "BTNFO",
          "CCFILE",
          "CHASE",
          "CHP",
          "CIVIL",
          "CKPNT",
          "CKVEH",
          "CODE33",
          "CODE7",
          "COL",
          "COMM",
          "CONCRT",
          "CRMSTP",
          "CRSARM",
          "CVLDIS",
          "DSPOT",
          "DUP",
          "EBMUD",
          "ELEC",
          "ENCMP",
          "EPO",
          "ESCAPE",
          "EVAL",
          "EVENT",
          "EVID",
          "FAX",
          "FLOOD",
          "FNDGUN",
          "FNDJUV",
          "FNDMP",
          "FNDPRO",
          "FNDSEN",
          "GAS",
          "GUARD",
          "HAZ",
          "HAZMAT",
          "HYDRNT",
          "IA",
          "IFS",
          "INFO",
          "JGP",
          "LEASH",
          "LOJACK",
          "LOST",
          "LPROP",
          "LSTVEH",
          "MAIL",
          "MEET",
          "MFF",
          "MISCAL",
          "MJ",
          "MP",
          "MPRISK",
          "MS",
          "MSDIAL",
          "NOISE",
          "NOTIFY",
          "OD",
          "ODOR",
          "OMC",
          "ONLINE",
          "OTC",
          "OV",
          "PAROLE",
          "PD",
          "PDOA",
          "PHONE",
          "PI",
          "POU",
          "POWER",
          "QUAKE",
          "R10851",
          "RADIO",
          "RADIOT",
          "RAIDER",
          "RELIEF",
          "RR",
          "RTEST",
          "SDESHO",
          "SEARCH",
          "SECCK",
          "SENILE",
          "SEWER",
          "SIDESH",
          "SIGNAL",
          "SLEEP",
          "SMOKE",
          "SPCENF",
          "STALL",
          "STREET",
          "SUB",
          "SUPPL",
          "SURNDR",
          "SURV",
          "SURVEI",
          "SUSP",
          "SUSPS",
          "T18",
          "TAM",
          "TARA",
          "TEC",
          "TEST",
          "TIP",
          "TRAIN",
          "TRUANT",
          "UNF",
          "UNIT",
          "UNSEC",
          "VICE",
          "VICTIM",
          "VIDEO",
          "VINVER",
          "WAG",
          "WALK",
          "WALKTR",
          "WARSVC",
          "WASH",
          "WATER",
          "WELCK",
          "WIRES",
          "WIT",
          "WRNT",
          "YELALT"
         ],
         "y": [
          2,
          1,
          10,
          18546,
          26,
          46,
          451,
          10,
          61,
          11,
          3414,
          1016,
          50,
          8,
          18,
          5,
          473,
          17,
          285,
          35,
          5,
          66,
          890,
          5368,
          23,
          348,
          10,
          9094,
          1269,
          17,
          426,
          654,
          44,
          4065,
          25,
          90,
          3,
          79,
          1268,
          140,
          469,
          12856,
          1,
          3,
          46,
          9477,
          156,
          273,
          4959,
          748,
          364,
          808,
          165,
          3,
          58,
          20,
          20,
          1,
          40,
          47,
          247,
          709,
          160,
          3045,
          153,
          217,
          709,
          1,
          20,
          581,
          52,
          788,
          3,
          8,
          1,
          370,
          923,
          1,
          6,
          267,
          497,
          15,
          3,
          381,
          1,
          13638,
          991,
          2841,
          11466,
          2881,
          2288,
          9300,
          7590,
          1652,
          53,
          1047,
          7688,
          974,
          1667,
          4287,
          273,
          854,
          7032,
          6601,
          1812,
          1373,
          30,
          437,
          36,
          26,
          467,
          1,
          11044,
          6757,
          557,
          139,
          7,
          85,
          3962,
          117,
          3,
          48,
          1660,
          39,
          1636,
          4,
          133,
          48,
          130,
          25,
          13352,
          1275,
          19,
          5,
          31,
          259,
          159,
          5,
          2570,
          2422,
          1141,
          599,
          3446,
          5024,
          1,
          1,
          1,
          370,
          1140,
          1271,
          3715,
          677,
          60,
          25,
          71,
          66,
          1270,
          7962,
          5018,
          1790,
          517,
          395,
          539,
          12127,
          259,
          28,
          7064,
          10883,
          203,
          135,
          35,
          751,
          17915,
          1819,
          10006,
          54,
          545,
          1857,
          1744,
          15,
          2007,
          282,
          1364,
          110,
          146,
          63,
          19,
          143,
          87,
          14,
          1515,
          265,
          379,
          3504,
          78,
          35662,
          605,
          290,
          141,
          1330,
          1048,
          38,
          1530,
          4356,
          1139,
          14309,
          15,
          1573,
          907,
          76,
          7007,
          133,
          1526,
          3064,
          2480,
          544,
          632,
          2521,
          100,
          16,
          1314,
          638,
          527,
          407,
          7881,
          553,
          360,
          3744,
          32591,
          86,
          1418,
          7186,
          27,
          70,
          292,
          417,
          43,
          716,
          11,
          12,
          55,
          1053,
          2322,
          162,
          20,
          11031,
          24,
          2,
          8622,
          418,
          317,
          25,
          77,
          12,
          4015,
          1076,
          3799,
          1,
          26542,
          4,
          1,
          15,
          67,
          34,
          1,
          5,
          160,
          1295,
          24,
          1,
          2971,
          55,
          1012,
          1,
          80,
          203,
          182,
          24,
          2851,
          150,
          133,
          124,
          6553,
          51,
          88,
          2404,
          2,
          8522,
          150,
          315,
          437,
          51,
          122,
          31,
          1,
          804,
          101,
          9,
          546,
          1803,
          544,
          282,
          1707,
          1,
          25,
          525,
          121,
          2523,
          308,
          9,
          110371,
          16,
          1477,
          1079,
          2401,
          234,
          1192,
          17,
          7,
          8707,
          14,
          777,
          22,
          31,
          6451,
          148,
          939,
          296,
          26079,
          209,
          6,
          788,
          416,
          1343,
          193,
          4951,
          397,
          980,
          1,
          121,
          68,
          536,
          39,
          2505,
          11,
          7,
          348,
          54,
          4267,
          607,
          2,
          971,
          102,
          21,
          65,
          1039,
          1,
          297,
          943,
          2,
          1,
          1014,
          380,
          339,
          459,
          163,
          6211,
          214,
          3,
          125,
          2
         ]
        }
       ],
       "layout": {
        "barmode": "stack",
        "title": {
         "text": "Crimes amount by incident type"
        },
        "xaxis": {
         "title": {
          "text": "Incident type"
         }
        }
       }
      },
      "text/html": [
       "<div>\n",
       "        \n",
       "        \n",
       "            <div id=\"af648d58-a2d8-4f5b-9280-afcfa01b3ade\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>\n",
       "            <script type=\"text/javascript\">\n",
       "                require([\"plotly\"], function(Plotly) {\n",
       "                    window.PLOTLYENV=window.PLOTLYENV || {};\n",
       "                    window.PLOTLYENV.BASE_URL='https://plot.ly';\n",
       "                    \n",
       "                if (document.getElementById(\"af648d58-a2d8-4f5b-9280-afcfa01b3ade\")) {\n",
       "                    Plotly.newPlot(\n",
       "                        'af648d58-a2d8-4f5b-9280-afcfa01b3ade',\n",
       "                        [{\"type\": \"bar\", \"uid\": \"0abecde6-dd56-448c-8160-9867d4f45c06\", \"x\": [\"107\", \"10751\", \"10801\", \"10851\", \"10852\", \"10855\", \"11350\", \"11351\", \"11357\", \"11368\", \"11500\", \"11550\", \"136_1\", \"140\", \"148\", \"148_5A\", \"160B\", \"162\", \"166\", \"166_4\", \"182\", \"187\", \"20001\", \"20002\", \"203\", \"207\", \"209\", \"211\", \"211S\", \"21235V\", \"212_5\", \"215\", \"220\", \"23103\", \"23109\", \"23110\", \"23110A\", \"23110B\", \"23152\", \"236\", \"240\", \"242\", \"243A\", \"243B\", \"243D\", \"243E\", \"243_4\", \"244\", \"245\", \"246\", \"247\", \"261\", \"261KIT\", \"261VIC\", \"261_5\", \"262\", \"270\", \"270C\", \"271\", \"272\", \"273A\", \"273D\", \"273_5\", \"273_6\", \"277\", \"278\", \"278_5\", \"285\", \"286\", \"288\", \"290\", \"300A\", \"300B\", \"300WI\", \"3056\", \"311\", \"314\", \"31VC\", \"3211H\", \"330\", \"368\", \"370\", \"372\", \"374\", \"402B\", \"415\", \"415A\", \"415BF\", \"415C\", \"415CU\", \"415D\", \"415E\", \"415F\", \"415FC\", \"415G\", \"415GF\", \"415GS\", \"415J\", \"415LT\", \"415N\", \"415P\", \"415RM\", \"415SS\", \"415TH\", \"415UG\", \"417\", \"418\", \"422\", \"422.6\", \"4390\", \"451\", \"4532\", \"459\", \"459AU\", \"470\", \"472\", \"475\", \"476\", \"484\", \"484COD\", \"484E\", \"484G\", \"484LP\", \"484TT\", \"487\", \"487E\", \"496\", \"498\", \"503\", \"508\", \"5150\", \"5150B\", \"518\", \"524\", \"529\", \"530\", \"537\", \"593\", \"594\", \"597\", \"601I\", \"601PU\", \"601R\", \"602L\", \"626_1\", \"626_6\", \"626_9\", \"646_9\", \"647\", \"647B\", \"647C\", \"647F\", \"647_6\", \"653G\", \"653M\", \"653Y\", \"900\", \"901\", \"901A\", \"901B\", \"901CP\", \"901D\", \"901H\", \"905\", \"906\", \"907\", \"908A\", \"908B\", \"908C\", \"908D\", \"909D\", \"910\", \"911H\", \"911N\", \"912\", \"913\", \"913A\", \"913TH\", \"914\", \"915\", \"918\", \"921\", \"922\", \"922A\", \"922B\", \"924\", \"925\", \"928\", \"928C\", \"928P\", \"929\", \"929AU\", \"933AU\", \"933MA\", \"933MED\", \"933R\", \"933S\", \"933SA\", \"933T\", \"940\", \"940A\", \"940B\", \"941\", \"943\", \"945\", \"945A\", \"945B\", \"946\", \"947\", \"947J\", \"949\", \"950\", \"953\", \"955\", \"955A\", \"955B\", \"955E\", \"955F\", \"962\", \"963\", \"968\", \"968A\", \"970\", \"970A\", \"970B\", \"970C\", \"973\", \"975\", \"976\", \"976A\", \"976B\", \"977\", \"977A\", \"A'S\", \"A10851\", \"A211\", \"A261\", \"A459\", \"A487\", \"ABC\", \"ACU\", \"AOA\", \"ASSIST\", \"AWOL\", \"BBALL\", \"BCAST\", \"BLALRT\", \"BOARD\", \"BTNFO\", \"CCFILE\", \"CHASE\", \"CHP\", \"CIVIL\", \"CKPNT\", \"CKVEH\", \"CODE33\", \"CODE7\", \"COL\", \"COMM\", \"CONCRT\", \"CRMSTP\", \"CRSARM\", \"CVLDIS\", \"DSPOT\", \"DUP\", \"EBMUD\", \"ELEC\", \"ENCMP\", \"EPO\", \"ESCAPE\", \"EVAL\", \"EVENT\", \"EVID\", \"FAX\", \"FLOOD\", \"FNDGUN\", \"FNDJUV\", \"FNDMP\", \"FNDPRO\", \"FNDSEN\", \"GAS\", \"GUARD\", \"HAZ\", \"HAZMAT\", \"HYDRNT\", \"IA\", \"IFS\", \"INFO\", \"JGP\", \"LEASH\", \"LOJACK\", \"LOST\", \"LPROP\", \"LSTVEH\", \"MAIL\", \"MEET\", \"MFF\", \"MISCAL\", \"MJ\", \"MP\", \"MPRISK\", \"MS\", \"MSDIAL\", \"NOISE\", \"NOTIFY\", \"OD\", \"ODOR\", \"OMC\", \"ONLINE\", \"OTC\", \"OV\", \"PAROLE\", \"PD\", \"PDOA\", \"PHONE\", \"PI\", \"POU\", \"POWER\", \"QUAKE\", \"R10851\", \"RADIO\", \"RADIOT\", \"RAIDER\", \"RELIEF\", \"RR\", \"RTEST\", \"SDESHO\", \"SEARCH\", \"SECCK\", \"SENILE\", \"SEWER\", \"SIDESH\", \"SIGNAL\", \"SLEEP\", \"SMOKE\", \"SPCENF\", \"STALL\", \"STREET\", \"SUB\", \"SUPPL\", \"SURNDR\", \"SURV\", \"SURVEI\", \"SUSP\", \"SUSPS\", \"T18\", \"TAM\", \"TARA\", \"TEC\", \"TEST\", \"TIP\", \"TRAIN\", \"TRUANT\", \"UNF\", \"UNIT\", \"UNSEC\", \"VICE\", \"VICTIM\", \"VIDEO\", \"VINVER\", \"WAG\", \"WALK\", \"WALKTR\", \"WARSVC\", \"WASH\", \"WATER\", \"WELCK\", \"WIRES\", \"WIT\", \"WRNT\", \"YELALT\"], \"y\": [2, 1, 10, 18546, 26, 46, 451, 10, 61, 11, 3414, 1016, 50, 8, 18, 5, 473, 17, 285, 35, 5, 66, 890, 5368, 23, 348, 10, 9094, 1269, 17, 426, 654, 44, 4065, 25, 90, 3, 79, 1268, 140, 469, 12856, 1, 3, 46, 9477, 156, 273, 4959, 748, 364, 808, 165, 3, 58, 20, 20, 1, 40, 47, 247, 709, 160, 3045, 153, 217, 709, 1, 20, 581, 52, 788, 3, 8, 1, 370, 923, 1, 6, 267, 497, 15, 3, 381, 1, 13638, 991, 2841, 11466, 2881, 2288, 9300, 7590, 1652, 53, 1047, 7688, 974, 1667, 4287, 273, 854, 7032, 6601, 1812, 1373, 30, 437, 36, 26, 467, 1, 11044, 6757, 557, 139, 7, 85, 3962, 117, 3, 48, 1660, 39, 1636, 4, 133, 48, 130, 25, 13352, 1275, 19, 5, 31, 259, 159, 5, 2570, 2422, 1141, 599, 3446, 5024, 1, 1, 1, 370, 1140, 1271, 3715, 677, 60, 25, 71, 66, 1270, 7962, 5018, 1790, 517, 395, 539, 12127, 259, 28, 7064, 10883, 203, 135, 35, 751, 17915, 1819, 10006, 54, 545, 1857, 1744, 15, 2007, 282, 1364, 110, 146, 63, 19, 143, 87, 14, 1515, 265, 379, 3504, 78, 35662, 605, 290, 141, 1330, 1048, 38, 1530, 4356, 1139, 14309, 15, 1573, 907, 76, 7007, 133, 1526, 3064, 2480, 544, 632, 2521, 100, 16, 1314, 638, 527, 407, 7881, 553, 360, 3744, 32591, 86, 1418, 7186, 27, 70, 292, 417, 43, 716, 11, 12, 55, 1053, 2322, 162, 20, 11031, 24, 2, 8622, 418, 317, 25, 77, 12, 4015, 1076, 3799, 1, 26542, 4, 1, 15, 67, 34, 1, 5, 160, 1295, 24, 1, 2971, 55, 1012, 1, 80, 203, 182, 24, 2851, 150, 133, 124, 6553, 51, 88, 2404, 2, 8522, 150, 315, 437, 51, 122, 31, 1, 804, 101, 9, 546, 1803, 544, 282, 1707, 1, 25, 525, 121, 2523, 308, 9, 110371, 16, 1477, 1079, 2401, 234, 1192, 17, 7, 8707, 14, 777, 22, 31, 6451, 148, 939, 296, 26079, 209, 6, 788, 416, 1343, 193, 4951, 397, 980, 1, 121, 68, 536, 39, 2505, 11, 7, 348, 54, 4267, 607, 2, 971, 102, 21, 65, 1039, 1, 297, 943, 2, 1, 1014, 380, 339, 459, 163, 6211, 214, 3, 125, 2]}],\n",
       "                        {\"barmode\": \"stack\", \"title\": {\"text\": \"Crimes amount by incident type\"}, \"xaxis\": {\"title\": {\"text\": \"Incident type\"}}},\n",
       "                        {\"showLink\": false, \"linkText\": \"Export to plot.ly\", \"plotlyServerURL\": \"https://plot.ly\", \"responsive\": true}\n",
       "                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('af648d58-a2d8-4f5b-9280-afcfa01b3ade');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })\n",
       "                };\n",
       "                });\n",
       "            </script>\n",
       "        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "traces = [go.Bar(\n",
    "        x=reduced_data.index,\n",
    "        y=reduced_data)]\n",
    "\n",
    "layout = go.Layout(barmode='stack', \n",
    "                   xaxis=dict(title='Incident type'),\n",
    "                   title='Crimes amount by incident type')\n",
    "\n",
    "fig = go.Figure(data=traces, layout=layout)\n",
    "iplot(fig)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
